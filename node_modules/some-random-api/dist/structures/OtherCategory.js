"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtherCategory = void 0;
const Category_1 = require("./Category");
const Errors_1 = require("../util/Errors");
class OtherCategory extends Category_1.Category {
    chatbot(message) {
        if (!message)
            throw new Errors_1.MissingParameter('message');
        return this.request('/chatbot', { message });
    }
    mc(username) {
        if (!username)
            throw new Errors_1.MissingParameter('username');
        return this.request('/mc', { username });
    }
    lyrics(title) {
        if (!title)
            throw new Errors_1.MissingParameter('title');
        return this.request('/lyrics', { title });
    }
    binaryEncode(text) {
        if (!text)
            throw new Errors_1.MissingParameter('text');
        return this.request('/binary', { text });
    }
    binaryDecode(decode) {
        if (!decode)
            throw new Errors_1.MissingParameter('decode');
        return this.request('/binary', { decode });
    }
    base64Encode(encode) {
        if (!encode)
            throw new Errors_1.MissingParameter('encode');
        return this.request('/base64', { encode });
    }
    base64Decode(decode) {
        if (!decode)
            throw new Errors_1.MissingParameter('decode');
        return this.request('/base64', { decode });
    }
    meme() {
        return this.request('/meme');
    }
}
exports.OtherCategory = OtherCategory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3RoZXJDYXRlZ29yeS5qcyIsInNvdXJjZVJvb3QiOiJzcmMvIiwic291cmNlcyI6WyJzdHJ1Y3R1cmVzL090aGVyQ2F0ZWdvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQW9EO0FBQ3BELDJDQUFrRDtBQStDbEQsTUFBYSxhQUFjLFNBQVEsbUJBQVE7SUFNbkMsT0FBTyxDQUFDLE9BQWU7UUFDN0IsSUFBSSxDQUFDLE9BQU87WUFBRSxNQUFNLElBQUkseUJBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFcEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQU9NLEVBQUUsQ0FBQyxRQUFnQjtRQUN6QixJQUFJLENBQUMsUUFBUTtZQUFFLE1BQU0sSUFBSSx5QkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBT00sTUFBTSxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUkseUJBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQU9NLFlBQVksQ0FBQyxJQUFZO1FBQy9CLElBQUksQ0FBQyxJQUFJO1lBQUUsTUFBTSxJQUFJLHlCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTlDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFPTSxZQUFZLENBQUMsTUFBYztRQUNqQyxJQUFJLENBQUMsTUFBTTtZQUFFLE1BQU0sSUFBSSx5QkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBT00sWUFBWSxDQUFDLE1BQWM7UUFDakMsSUFBSSxDQUFDLE1BQU07WUFBRSxNQUFNLElBQUkseUJBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQU9NLFlBQVksQ0FBQyxNQUFjO1FBQ2pDLElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLHlCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWxELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFNTSxJQUFJO1FBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRDtBQXJGRCxzQ0FxRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYXRlZ29yeSwgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9DYXRlZ29yeSc7XG5pbXBvcnQgeyBNaXNzaW5nUGFyYW1ldGVyIH0gZnJvbSAnLi4vdXRpbC9FcnJvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRib3RSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG5cdHJlc3BvbnNlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG5cdHVzZXJuYW1lOiBzdHJpbmc7XG5cdGZ1bGxfdXVpZDogc3RyaW5nO1xuXHR0cmltbWVkX3V1aWQ6IHN0cmluZztcblx0bmFtZV9oaXN0b3J5OiB7IG5hbWU6IHN0cmluZzsgY2hhbmdlZFRvQXQ6IHN0cmluZyB9W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHlyaWNzUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHR0aXRsZTogc3RyaW5nO1xuXHRhdXRob3I6IHN0cmluZztcblx0bHlyaWNzOiBzdHJpbmc7XG5cdHRodW1ibmFpbDogb2JqZWN0O1xuXHRsaW5rczogb2JqZWN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJpbmFyeUVuY29kZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcblx0YmluYXJ5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmluYXJ5RGVjb2RlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHR0ZXh0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZTY0RW5jb2RlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHRiYXNlNjQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlNjREZWNvZGVSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG5cdHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1lUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuXHRpZDogbnVtYmVyO1xuXHRpbWFnZTogc3RyaW5nO1xuXHRjYXB0aW9uOiBzdHJpbmc7XG5cdGNhdGVnb3J5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogT3RoZXIgQ2F0ZWdvcnkgLSBpbmNsdWRlcyBvdGhlciBlbmRwb2ludHNcbiAqL1xuZXhwb3J0IGNsYXNzIE90aGVyQ2F0ZWdvcnkgZXh0ZW5kcyBDYXRlZ29yeSB7XG5cdC8qKlxuXHQgKiBHZXQgbWVzc2FnZSBmcm9tIGNoYXRib3Rcblx0ICogQHBhcmFtIG1lc3NhZ2Uge3N0cmluZ30gbWVzc2FnZSBjb250ZW50IHRvIHJlc3BvbmQgdG9cblx0ICogQHNlZSBodHRwczovL3NvbWUtcmFuZG9tLWFwaS5tbC9kb2NzL290aGVyL2NoYXRib3Rcblx0ICovXG5cdHB1YmxpYyBjaGF0Ym90KG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8Q2hhdGJvdFJlc3BvbnNlPiB7XG5cdFx0aWYgKCFtZXNzYWdlKSB0aHJvdyBuZXcgTWlzc2luZ1BhcmFtZXRlcignbWVzc2FnZScpO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVxdWVzdCgnL2NoYXRib3QnLCB7IG1lc3NhZ2UgfSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGRhdGEgYWJvdXQgTWluZWNyYWZ0IHVzZXJuYW1lXG5cdCAqIEBwYXJhbSB1c2VybmFtZSB7c3RyaW5nfSBNaW5lY3JhZnQgdXNlcm5hbWVcblx0ICogQHNlZSBodHRwczovL3NvbWUtcmFuZG9tLWFwaS5tbC9kb2NzL290aGVyL21pbmVjcmFmdFxuXHQgKi9cblx0cHVibGljIG1jKHVzZXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPE1jUmVzcG9uc2U+IHtcblx0XHRpZiAoIXVzZXJuYW1lKSB0aHJvdyBuZXcgTWlzc2luZ1BhcmFtZXRlcigndXNlcm5hbWUnKTtcblxuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoJy9tYycsIHsgdXNlcm5hbWUgfSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGx5cmljcyBvZiBhIHNvbmdcblx0ICogQHBhcmFtIHRpdGxlIHtzdHJpbmd9IHNvbmcgdGl0bGVcblx0ICogQHNlZSBodHRwczovL3NvbWUtcmFuZG9tLWFwaS5tbC9kb2NzL290aGVyL2x5cmljc1xuXHQgKi9cblx0cHVibGljIGx5cmljcyh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTxMeXJpY3NSZXNwb25zZT4ge1xuXHRcdGlmICghdGl0bGUpIHRocm93IG5ldyBNaXNzaW5nUGFyYW1ldGVyKCd0aXRsZScpO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVxdWVzdCgnL2x5cmljcycsIHsgdGl0bGUgfSk7XG5cdH1cblxuXHQvKipcblx0ICogRW5jb2RlIHRleHQgdG8gYmluYXJ5XG5cdCAqIEBwYXJhbSB0ZXh0IHtzdHJpbmd9IHRleHQgdG8gZW5jb2RlXG5cdCAqIEBzZWUgaHR0cHM6Ly9zb21lLXJhbmRvbS1hcGkubWwvZG9jcy9vdGhlci9iaW5hcnlcblx0ICovXG5cdHB1YmxpYyBiaW5hcnlFbmNvZGUodGV4dDogc3RyaW5nKTogUHJvbWlzZTxCaW5hcnlFbmNvZGVSZXNwb25zZT4ge1xuXHRcdGlmICghdGV4dCkgdGhyb3cgbmV3IE1pc3NpbmdQYXJhbWV0ZXIoJ3RleHQnKTtcblxuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoJy9iaW5hcnknLCB7IHRleHQgfSk7XG5cdH1cblxuXHQvKipcblx0ICogRGVjb2RlIGJpbmFyeSB0byB0ZXh0XG5cdCAqIEBwYXJhbSBkZWNvZGUge3N0cmluZ30gYmluYXJ5IHRvIGRlbmNvZGVcblx0ICogQHNlZSBodHRwczovL3NvbWUtcmFuZG9tLWFwaS5tbC9kb2NzL290aGVyL2JpbmFyeVxuXHQgKi9cblx0cHVibGljIGJpbmFyeURlY29kZShkZWNvZGU6IHN0cmluZyk6IFByb21pc2U8QmluYXJ5RGVjb2RlUmVzcG9uc2U+IHtcblx0XHRpZiAoIWRlY29kZSkgdGhyb3cgbmV3IE1pc3NpbmdQYXJhbWV0ZXIoJ2RlY29kZScpO1xuXG5cdFx0cmV0dXJuIHRoaXMucmVxdWVzdCgnL2JpbmFyeScsIHsgZGVjb2RlIH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVuY29kZSB0ZXh0IHRvIGJhc2U2NFxuXHQgKiBAcGFyYW0gZW5jb2RlIHtzdHJpbmd9IHRleHQgdG8gZW5jb2RlXG5cdCAqIEBzZWUgaHR0cHM6Ly9zb21lLXJhbmRvbS1hcGkubWwvZG9jcy9vdGhlci9iYXNlNjRcblx0ICovXG5cdHB1YmxpYyBiYXNlNjRFbmNvZGUoZW5jb2RlOiBzdHJpbmcpOiBQcm9taXNlPEJhc2U2NEVuY29kZVJlc3BvbnNlPiB7XG5cdFx0aWYgKCFlbmNvZGUpIHRocm93IG5ldyBNaXNzaW5nUGFyYW1ldGVyKCdlbmNvZGUnKTtcblxuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoJy9iYXNlNjQnLCB7IGVuY29kZSB9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWNvZGUgYmFzZTY0IHRvIHRleHRcblx0ICogQHBhcmFtIGRlY29kZSB7c3RyaW5nfSBiYXNlNjQgdG8gZGVuY29kZVxuXHQgKiBAc2VlIGh0dHBzOi8vc29tZS1yYW5kb20tYXBpLm1sL2RvY3Mvb3RoZXIvYmFzZTY0XG5cdCAqL1xuXHRwdWJsaWMgYmFzZTY0RGVjb2RlKGRlY29kZTogc3RyaW5nKTogUHJvbWlzZTxCYXNlNjREZWNvZGVSZXNwb25zZT4ge1xuXHRcdGlmICghZGVjb2RlKSB0aHJvdyBuZXcgTWlzc2luZ1BhcmFtZXRlcignZGVjb2RlJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZXF1ZXN0KCcvYmFzZTY0JywgeyBkZWNvZGUgfSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHJhbmRvbSBtZW1lICh1bmRvY3VtZW50ZWQpXG5cdCAqIEBzZWUgaHR0cHM6Ly9zb21lLXJhbmRvbS1hcGkubWwvZG9jcy9vdGhlci9tZW1lXG5cdCAqL1xuXHRwdWJsaWMgbWVtZSgpOiBQcm9taXNlPE1lbWVSZXNwb25zZT4ge1xuXHRcdHJldHVybiB0aGlzLnJlcXVlc3QoJy9tZW1lJyk7XG5cdH1cbn1cbiJdfQ==