"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Category = void 0;
const node_fetch_1 = require("node-fetch");
const url_1 = require("url");
class Category {
    constructor(baseEndpoint = '', baseURL = 'https://some-random-api.ml') {
        this.baseURL = baseURL;
        this.baseEndpoint = baseEndpoint;
    }
    async request(endpoint, query) {
        const URL = this.baseURL + this.baseEndpoint + endpoint;
        let params;
        if (query) {
            params = new url_1.URLSearchParams();
            for (const [k, v] of Object.entries(query)) {
                params.append(k, v);
            }
        }
        const res = await node_fetch_1.default(params ? `${URL}?${params}` : URL);
        const json = await res.json();
        return json;
    }
    async requestBuffer(endpoint, query) {
        const URL = this.baseURL + this.baseEndpoint + endpoint;
        let params;
        if (query) {
            params = new url_1.URLSearchParams();
            for (const [k, v] of Object.entries(query)) {
                params.append(k, v);
            }
        }
        const res = await node_fetch_1.default(params ? `${URL}?${params}` : URL);
        const buffer = await res.buffer();
        return buffer;
    }
}
exports.Category = Category;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2F0ZWdvcnkuanMiLCJzb3VyY2VSb290Ijoic3JjLyIsInNvdXJjZXMiOlsic3RydWN0dXJlcy9DYXRlZ29yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBK0I7QUFDL0IsNkJBQXNDO0FBY3RDLE1BQXNCLFFBQVE7SUFXN0IsWUFBbUIsWUFBWSxHQUFHLEVBQUUsRUFBRSxPQUFPLEdBQUcsNEJBQTRCO1FBQzNFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ2xDLENBQUM7SUFRTSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQWdCLEVBQUUsS0FBYztRQUNwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDO1FBQ3hELElBQUksTUFBTSxDQUFDO1FBRVgsSUFBSSxLQUFLLEVBQUU7WUFDVixNQUFNLEdBQUcsSUFBSSxxQkFBZSxFQUFFLENBQUM7WUFDL0IsS0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1NBQ0Q7UUFFRCxNQUFNLEdBQUcsR0FBRyxNQUFNLG9CQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBUU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFnQixFQUFFLEtBQWM7UUFDMUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQztRQUN4RCxJQUFJLE1BQU0sQ0FBQztRQUVYLElBQUksS0FBSyxFQUFFO1lBQ1YsTUFBTSxHQUFHLElBQUkscUJBQWUsRUFBRSxDQUFDO1lBQy9CLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNwQjtTQUNEO1FBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxvQkFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNELE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xDLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztDQUNEO0FBM0RELDRCQTJEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCB7IFVSTFNlYXJjaFBhcmFtcyB9IGZyb20gJ3VybCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVJlc3BvbnNlIHtcblx0ZXJyb3I/OiBzdHJpbmc7XG5cdG1lc3NhZ2U/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcblx0bGluazogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJhc2UgQ2F0ZWdvcnlcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhdGVnb3J5IHtcblx0LyoqIEJhc2UgVVJMICovXG5cdHB1YmxpYyBiYXNlVVJMOiBzdHJpbmc7XG5cdC8qKiBCYXNlIGVuZHBvaW50ICovXG5cdHB1YmxpYyBiYXNlRW5kcG9pbnQ6IHN0cmluZztcblxuXHQvKipcblx0ICogQ3JlYXRlIG5ldyBjYXRlZ29yeSBjbGFzc1xuXHQgKiBAcGFyYW0gYmFzZUVuZHBvaW50IHtzdHJpbmd9IGJhc2UgZW5kcG9pbnQgZm9yIHN1Yi1lbmRwb2ludHMgKGRlZmF1bHQgJycpXG5cdCAqIEBwYXJhbSBiYXNlVVJMIHtzdHJpbmd9IGJhc2UgVVJMIGZvciByZXF1ZXN0cyAoZGVmYXVsdCAnaHR0cHM6Ly9zb21lLXJhbmRvbS1hcGkubWwnKVxuXHQgKi9cblx0cHVibGljIGNvbnN0cnVjdG9yKGJhc2VFbmRwb2ludCA9ICcnLCBiYXNlVVJMID0gJ2h0dHBzOi8vc29tZS1yYW5kb20tYXBpLm1sJykge1xuXHRcdHRoaXMuYmFzZVVSTCA9IGJhc2VVUkw7XG5cdFx0dGhpcy5iYXNlRW5kcG9pbnQgPSBiYXNlRW5kcG9pbnQ7XG5cdH1cblxuXHQvKipcblx0ICogUGVyZm9ybSBuZXcgcmVxdWVzdFxuXHQgKiBAcGFyYW0gZW5kcG9pbnQge3N0cmluZ30gZW5kcG9pbnQgdG8gcmVxdWVzdFxuXHQgKiBAcGFyYW0gcXVlcnkge29iamVjdH0gcXVlcnkgdG8gYXR0YWNoXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IHJlc3BvbnNlIG9mIEFQSVxuXHQgKi9cblx0cHVibGljIGFzeW5jIHJlcXVlc3QoZW5kcG9pbnQ6IHN0cmluZywgcXVlcnk/OiBvYmplY3QpOiBQcm9taXNlPGFueT4ge1xuXHRcdGNvbnN0IFVSTCA9IHRoaXMuYmFzZVVSTCArIHRoaXMuYmFzZUVuZHBvaW50ICsgZW5kcG9pbnQ7XG5cdFx0bGV0IHBhcmFtcztcblxuXHRcdGlmIChxdWVyeSkge1xuXHRcdFx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXHRcdFx0Zm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnkpKSB7XG5cdFx0XHRcdHBhcmFtcy5hcHBlbmQoaywgdik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgZmV0Y2gocGFyYW1zID8gYCR7VVJMfT8ke3BhcmFtc31gIDogVVJMKTtcblx0XHRjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcblx0XHRyZXR1cm4ganNvbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBQZXJmb3JtIG5ldyBidWZmZXIgcmVxdWVzdFxuXHQgKiBAcGFyYW0gZW5kcG9pbnQge3N0cmluZ30gZW5kcG9pbnQgdG8gcmVxdWVzdFxuXHQgKiBAcGFyYW0gcXVlcnkge29iamVjdH0gcXVlcnkgdG8gYXR0YWNoXG5cdCAqIEByZXR1cm5zIHtQcm9taXNlPEJ1ZmZlcj59IHJlc3BvbnNlIG9mIEFQSVxuXHQgKi9cblx0cHVibGljIGFzeW5jIHJlcXVlc3RCdWZmZXIoZW5kcG9pbnQ6IHN0cmluZywgcXVlcnk/OiBvYmplY3QpOiBQcm9taXNlPEJ1ZmZlcj4ge1xuXHRcdGNvbnN0IFVSTCA9IHRoaXMuYmFzZVVSTCArIHRoaXMuYmFzZUVuZHBvaW50ICsgZW5kcG9pbnQ7XG5cdFx0bGV0IHBhcmFtcztcblxuXHRcdGlmIChxdWVyeSkge1xuXHRcdFx0cGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXHRcdFx0Zm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnkpKSB7XG5cdFx0XHRcdHBhcmFtcy5hcHBlbmQoaywgdik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzID0gYXdhaXQgZmV0Y2gocGFyYW1zID8gYCR7VVJMfT8ke3BhcmFtc31gIDogVVJMKTtcblx0XHRjb25zdCBidWZmZXIgPSBhd2FpdCByZXMuYnVmZmVyKCk7XG5cdFx0cmV0dXJuIGJ1ZmZlcjtcblx0fVxufVxuIl19